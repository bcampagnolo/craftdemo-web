AWSTemplateFormatVersion: 2010-09-09

Description: craft-web-server

#Parameters:

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT1200S
    Properties:
      LaunchConfigurationName: !Ref InstanceLaunchConfig
      TargetGroupARNs:
        - Fn::ImportValue:
            !Sub vpc-bc481fc5:craft-web-services-web-DefaultTargetGroup:name
      # internal subnets
      VPCZoneIdentifier: 
        - "subnet-1f9e2366" 
        - "subnet-baea78e0"
        - "subnet-d664b89d"
      MaxSize: 1
      MinSize: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 720
      TerminationPolicies:
      - OldestInstance
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
        PropagateAtLaunch: true

  InstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 12
            VolumeType: gp2
      IamInstanceProfile:
        Fn::ImportValue:
          !Sub vpc-bc481fc5:craft-web-services-web-InstanceRoleProfile:name
      KeyName: flask-key-west2
      ImageId: ami-7f43f307
      InstanceType: t2.micro
      SecurityGroups:
        - Fn::ImportValue:
            !Sub vpc-bc481fc5:craft-demo-base-app-WebServicesAppSg:id
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Temporarily override the default umask of 0077
          umask 0022

          # Set the default region for the AWS CLI/SDK
          echo export AWS_DEFAULT_REGION=${AWS::Region} > /etc/profile.d/aws_default_region.sh && . /etc/profile.d/aws_default_region.sh

          mkdir -p /tmp/deploy
          cd /tmp/deploy

          ###### Download chef out of s3 ######s
          # 496911069803-us-west-2-artifacts/chef/cookbooks.zip
          aws s3 cp s3://${AWS::AccountId}-${AWS::Region}-artifacts/chef/cookbooks.zip ${AWS::StackName}.zip

          if [ $? -ne 0 ]; then
            # Unrecoverable error, so fail fast
            cfn-signal --region ${AWS::Region} --resource AutoScalingGroup --stack ${AWS::StackName} --success false
          fi

          unzip -o ${AWS::StackName}.zip -d cookbooks

          # ###### Run Chef ######
          mkdir -p /var/log/chef

          cd cookbooks
          ls config/solo.rb
          ls nodes/web-services/us-west-2/dev.json

          chef-solo -c config/solo.rb -j nodes/web-services/us-west-2/dev.json -l debug --force-logger

          if [ $? -eq 0 ]; then
            # All done!
            cfn-signal --region ${AWS::Region} --resource AutoScalingGroup --stack ${AWS::StackName}
          else
            # Deploy failed upload logs and die
            INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id`
            curl -s http://169.254.169.254/latest/user-data > /var/log/user-data.log
            # flask-west2-prod-west2-logs/fail_deploys/
            for log in /var/log/chef/chef.log /var/log/userdata.log /var/log/boot.log /var/log/cloud-init-output.log /var/log/nginx/access.log /var/log/nginx/error.log; do
              [ -f $log ] && aws s3 cp --acl bucket-owner-full-control $log s3://flask-west2-prod-west2-logs/fail_deploys/${AWS::StackName}/$INSTANCE_ID/`basename $log`
            done
            shutdown -h now
          fi

Outputs:
  InstanceAutoScalingGroup:
    Value: !Ref AutoScalingGroup
    Description: App instance ID
